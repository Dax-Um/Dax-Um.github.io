<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Dax의 개발 서랍</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Dax의 개발 서랍</description>
    <generator>Hugo -- 0.147.7</generator>
    <language>ko-kr</language>
    <lastBuildDate>Sun, 27 Jul 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>IntelliJ 알고리즘 문제 풀이 환경 세팅</title>
      <link>http://localhost:1313/posts/autocp_setting/</link>
      <pubDate>Sun, 27 Jul 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/autocp_setting/</guid>
      <description>&lt;h3 id=&#34;autocp&#34;&gt;AutoCP&lt;/h3&gt;
&lt;p&gt;알고리즘 문제 풀이를 할 때 해당 사이트에서 테스트 케이스 결과를 확인하기에는 불편한 부분이 있다.
이런 문제를 해결할 수 있는 방법으로 Jetbrain사의 IDE에서 사용할 수 있는 플러그인으로 Auto CP가 있다.
Auto CP는 백준(BOJ), Codeforces, AtCoder 등 경쟁 프로그래밍 문제를 더 빠르고 효율적으로 풀 수 있게 도와주는 플러그인이다.&lt;/p&gt;
&lt;img src=&#34;http://localhost:1313/images/autocp/autocp.png&#34; alt=&#34;auto cp&#34; width=&#34;250&#34; /&gt;
&lt;a href=&#34;https://pushpavel.github.io/AutoCp/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34; style=&#34;color: #1e90ff;&#34;&gt;[AutoCP 바로 가기] 
&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;h3 id=&#34;환경-설정-on-intellij&#34;&gt;환경 설정 (on IntelliJ)&lt;/h3&gt;
&lt;p&gt;현재 Java로 문제풀이를 하는 관계로 IntelliJ에서 세팅하는 법을 기록한다.
IntelliJ 설치 및 환경 설정은 되어 있다는 전제로 한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Activity</title>
      <link>http://localhost:1313/posts/activity/</link>
      <pubDate>Mon, 09 Jun 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/activity/</guid>
      <description>&lt;h1 id=&#34;-android-activity-완벽-가이드-2025년-기준&#34;&gt;🖥️ Android Activity 완벽 가이드 (2025년 기준)&lt;/h1&gt;
&lt;p&gt;Android 앱의 핵심 구성 요소인 &lt;strong&gt;Activity&lt;/strong&gt;는 사용자와 직접 상호작용하는 단일 UI 화면을 나타냅니다. Activity는 앱이 사용자에게 보여주는 &lt;strong&gt;각각의 화면&lt;/strong&gt;을 담당하며, 생명주기를 통해 시스템 이벤트에 반응하고 사용자 경험을 관리합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-activity란&#34;&gt;📌 Activity란?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;앱의 &lt;strong&gt;UI 단위 구성 요소&lt;/strong&gt;이며, 사용자에게 제공되는 하나의 화면을 의미합니다.&lt;/li&gt;
&lt;li&gt;앱 내의 여러 Activity는 사용자 흐름에 따라 서로 전환되며, 각각의 Activity는 독립된 생명주기를 가집니다.&lt;/li&gt;
&lt;li&gt;일반적으로 &lt;code&gt;MainActivity&lt;/code&gt;가 진입점이 되며, 이후 필요한 Activity를 &lt;code&gt;Intent&lt;/code&gt;를 통해 실행합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;대표적인-activity-예시&#34;&gt;대표적인 Activity 예시&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;로그인 화면 (&lt;code&gt;LoginActivity&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;홈 화면 (&lt;code&gt;HomeActivity&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;상세 정보 화면 (&lt;code&gt;DetailActivity&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-생명주기-구조&#34;&gt;🧬 생명주기 구조&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;📌 &lt;strong&gt;실무에서는?&lt;/strong&gt; Jetpack 아키텍처 컴포넌트를 활용해 생명주기 콜백을 직접 사용하는 비중은 줄고, 대부분 &lt;code&gt;repeatOnLifecycle&lt;/code&gt;, &lt;code&gt;ViewModel&lt;/code&gt;, &lt;code&gt;LifecycleObserver&lt;/code&gt;를 사용해 간접적으로 관리합니다. 하지만 생명주기 구조를 이해하는 것은 여전히 중요하며, 정확한 리소스 해제, 센서 관리, 화면 상태 복원 등에 필수적입니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Android Component</title>
      <link>http://localhost:1313/posts/android-component/</link>
      <pubDate>Mon, 09 Jun 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/android-component/</guid>
      <description>&lt;h1 id=&#34;-android-구성-요소-개요-2025년-기준&#34;&gt;📦 Android 구성 요소 개요 (2025년 기준)&lt;/h1&gt;
&lt;p&gt;Android 앱은 시스템과 상호작용하기 위한 네 가지 주요 컴포넌트로 구성됩니다. 각각의 컴포넌트는 앱이 사용자와 상호작용하거나, 백그라운드에서 작업을 수행하거나, 다른 앱과 데이터를 공유하거나, 시스템 이벤트를 수신할 수 있도록 합니다.
이러한 컴포넌트는 앱의 진입점(entry point) 역할을 하며, 반드시 &lt;code&gt;AndroidManifest.xml&lt;/code&gt;에 등록되어야 시스템이 인식하고 실행할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Activity&lt;/strong&gt;: 사용자 인터페이스(UI)를 구성하고 입력을 처리&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Service&lt;/strong&gt;: 백그라운드에서 UI 없이 장시간 작업 처리&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BroadcastReceiver&lt;/strong&gt;: 시스템 또는 앱의 이벤트를 수신&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ContentProvider&lt;/strong&gt;: 앱 간 데이터를 안전하게 공유&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-1-activity&#34;&gt;🖥️ 1. Activity&lt;/h2&gt;
&lt;h3 id=&#34;-정의&#34;&gt;✅ 정의&lt;/h3&gt;
&lt;p&gt;Activity는 사용자와 직접 상호작용하는 단일 UI 화면입니다. 사용자의 행동에 따라 앱의 상태를 전환하며, 생명주기(Lifecycle)를 통해 시스템 이벤트에 반응합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>테스트용 카테고리 - Kotlin</title>
      <link>http://localhost:1313/posts/test-kotlin/</link>
      <pubDate>Wed, 04 Jun 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/test-kotlin/</guid>
      <description>&lt;p&gt;테스트 글입니다. Kotlin 카테고리에 속해 있습니다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
